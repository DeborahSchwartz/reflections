What happens when you initialize a repository? Why do you need to do it?
Initializing a repository creates a hidden file, .git, which includes all the version control information.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is a place to put files that have changed, but not ready to commit as a single batch or a logical unit of work. The working directory is just where the files are and the repository keeps a log of all commits in the .git hidden file.

How can you use the staging area to make sure you have one commit per logical change?
There are several variations on git diff:
	git diff (no arguments): compares working directory and staging area
	git diff --staged: compares staging area and last commit
	git diff [commitid1] [dommitid2]: compared two different commits

	I could use git reset --hard which discards changes in working direcbory and the staging area, but remember this is not reversible.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches help when adding different features - maybe to test them out while keeping the main, working code in place. Or maybe because different versions will be released (different languages or differnt levels of difficult, for example)

How do the diagrams help you visualize the branch structure?
It shows all the branches in a visual way, rather than the linear way of a git log. Then, I can see the unreachables and the parent of each commit.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When two branches are merged, all the changes from both branches are made into the master (if the master is the branch merged). We put it in the diagram because the merged branch now has two parents.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging saves some time when it is clear to Git what should be done. Manually merging allows humans to decide what should happen after changes have been made, since Git doesn't know the outside logic of what should be changed.